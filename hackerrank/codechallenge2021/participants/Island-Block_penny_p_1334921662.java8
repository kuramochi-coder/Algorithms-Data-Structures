import java.awt.geom.Line2D;
import java.io.*;
import java.text.DecimalFormat;
import java.util.List;
import java.util.Objects;
import java.util.Vector;

//https://www.geeksforgeeks.org/convex-hull-set-1-jarviss-algorithm-or-wrapping/
public class Solution {
    static class Point {
        double x, y;

        Point(double x, double y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Point point = (Point) o;
            return Double.compare(point.x, x) == 0 && Double.compare(point.y, y) == 0;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }
    }

    static class GFG {

        // To find orientation of ordered triplet (p, q, r).
        // The function returns following values
        // 0 --> p, q and r are colinear
        // 1 --> Clockwise
        // 2 --> Counterclockwise
        public static int orientation(Point p, Point q, Point r) {
            double val = (q.y - p.y) * (r.x - q.x) -
                    (q.x - p.x) * (r.y - q.y);

            if (val == 0) return 0;  // collinear
            return (val > 0) ? 1 : 2; // clock or counterclock wise
        }

        // Prints convex hull of a set of n points.
        public static Vector<Point> convexHull(Point points[], int n) {
            // Initialize Result
            Vector<Point> hull = new Vector<Point>();

            // Find the leftmost point
            int l = 0;
            for (int i = 1; i < n; i++)
                if (points[i].x < points[l].x)
                    l = i;

            // Start from leftmost point, keep moving
            // counterclockwise until reach the start point
            // again. This loop runs O(h) times where h is
            // number of points in result or output.
            int p = l, q;
            do {
                // Add current point to result
                hull.add(points[p]);

                // Search for a point 'q' such that
                // orientation(p, q, x) is counterclockwise
                // for all points 'x'. The idea is to keep
                // track of last visited most counterclock-
                // wise point in q. If any point 'i' is more
                // counterclock-wise than q, then update q.
                q = (p + 1) % n;

                for (int i = 0; i < n; i++) {
                    // If i is more counterclockwise than
                    // current q, then update q
                    if (orientation(points[p], points[i], points[q])
                            == 2)
                        q = i;
                }

                // Now q is the most counterclockwise with
                // respect to p. Set p as q for next iteration,
                // so that q is added to result 'hull'
                p = q;

            } while (p != l);  // While we don't come to first
            // point
            return hull;
        }
    }

    private static double length(double x1, double y1, double x2, double y2) {
        double x = x1 - x2;
        double y = y1 - y2;
        return Math.sqrt(x * x + y * y);
    }

    public static void main(String[] args) throws IOException {
        DecimalFormat df = new DecimalFormat("0.00");
        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter o = new PrintWriter(new BufferedOutputStream(System.out));
        int N = Integer.parseInt(r.readLine());
        Point[] polygon = new Point[N + 2];
        Line2D[] islandLines = new Line2D[N];
        for (int i = 0; i < N; i++) {
            String[] line = r.readLine().split(" ");
            int x = Integer.parseInt(line[0]);
            int y = Integer.parseInt(line[1]);
            Point point = new Point(x, y);
            polygon[i] = point;
        }
        for (int i = 0; i < N - 1; i++) {
            islandLines[i] = new Line2D.Double(polygon[i].x, polygon[i].y, polygon[i + 1].x, polygon[i + 1].y);
        }
        islandLines[N - 1] = new Line2D.Double(polygon[N - 1].x, polygon[N - 1].y, polygon[0].x, polygon[0].y);

        int M = Integer.parseInt(r.readLine());
        for (int i = 0; i < M; i++) {
            String[] rLine = r.readLine().split(" ");
            Point a = new Point(Integer.parseInt(rLine[0]), Integer.parseInt(rLine[1]));
            Point b = new Point(Integer.parseInt(rLine[2]), Integer.parseInt(rLine[3]));
            polygon[polygon.length - 2] = a;
            polygon[polygon.length - 1] = b;
            Line2D straightLine = new Line2D.Double(a.x, a.y, b.x, b.y);
            boolean toProcessIsland = false;
            for (Line2D polygonLine : islandLines) {
                if (straightLine.intersectsLine(polygonLine)) {
                    toProcessIsland = true;
                    break;
                }
            }
            if (!toProcessIsland) {
                o.println(df.format(length(straightLine.getX1(), straightLine.getY1(), straightLine.getX2(),
                        straightLine.getY2())));
                continue;
            }
            List<Point> hull = GFG.convexHull(polygon, polygon.length);
            //Find index A
            double totalLength = 0;
            int hullSize = hull.size();
            for (int j = 0; j < hullSize - 1; j++) {
                totalLength += length(hull.get(j).x, hull.get(j).y, hull.get(j + 1).x, hull.get(j + 1).y);
            }
            totalLength += length(hull.get(hullSize - 1).x, hull.get(hullSize - 1).y, hull.get(0).x, hull.get(0).y);
            int indexA = hull.indexOf(a);
            int indexB = hull.indexOf(b);
            double sum = 0;
            if (indexA < indexB) {
                for (int j = indexA; j < indexB; j++) {
                    sum += length(hull.get(j).x, hull.get(j).y, hull.get(j + 1).x, hull.get(j + 1).y);
                }
            } else {
                for (int j = indexB; j < indexA; j++) {
                    sum += length(hull.get(j).x, hull.get(j).y, hull.get(j + 1).x, hull.get(j + 1).y);
                }
            }
            double otherDirection = totalLength - sum;
            double minSum = Math.min(sum, otherDirection);
            o.println(df.format(minSum));
        }
        o.close();
    }
}

